/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2023-03-23 05:42:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Title</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<button id=\"myButton\" style=\"display:none;\">點擊這裡</button>\r\n");
      out.write("<script>\r\n");
      out.write("  var button = document.getElementById(\"myButton\");\r\n");
      out.write("  var targetString = [\"a\",\"r\",\"a\",\"w\",\"a\",\"r\",\"e\"];\r\n");
      out.write("  var inputString = [];\r\n");
      out.write("  document.addEventListener(\"keydown\", function(event) {\r\n");
      out.write("      // 創建一個陣列，包含需要檢查的字符\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      // 創建一個陣列，用於存儲已輸入的字符\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      // 將輸入的字符添加到inputString陣列中\r\n");
      out.write("      if (event.key === \"a\" || event.key === \"r\" || event.key === \"w\" || event.key === \"e\") {\r\n");
      out.write("          inputString.push(event.key);\r\n");
      out.write("          console.log(event.key);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("          // 檢查inputString陣列中的字符是否與targetString陣列匹配\r\n");
      out.write("          for (var i = 0; i < inputString.length; i++) {\r\n");
      out.write("              if (inputString[i] !== targetString[i]) {\r\n");
      out.write("                  // 字符不匹配，清空inputString陣列\r\n");
      out.write("                  inputString = [];\r\n");
      out.write("                  break;\r\n");
      out.write("              }\r\n");
      out.write("          }\r\n");
      out.write("\r\n");
      out.write("          // 如果inputString陣列與targetString陣列匹配，則顯示按鈕\r\n");
      out.write("          if (inputString.length === targetString.length) {\r\n");
      out.write("              button.style.display = \"block\";\r\n");
      out.write("          }\r\n");
      out.write("      }\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  //\r\n");
      out.write("  // document.onkeyup=function (event) {\r\n");
      out.write("  //     alert(event.key)\r\n");
      out.write("  //     if (event.key === \"a\" || event.key === \"r\" || event.key === \"w\" || event.key === \"e\") {\r\n");
      out.write("  //         inputString.push(event.key);\r\n");
      out.write("  //         console.log(event.key);\r\n");
      out.write("  //\r\n");
      out.write("  //     }\r\n");
      out.write("  // }\r\n");
      out.write("  實際使用\r\n");
      out.write("  // document.onkeydown=function(e) {  //對整個頁面文檔監聽\r\n");
      out.write("  //     alert();\r\n");
      out.write("  //     //判斷如果用戶按下了回車鍵（keycody=13）\r\n");
      out.write("  // }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
